#include "pch.h" 
#include <vector> 
#include <string> 
#include <iostream> 
#include <cmath> 

using namespace std; 

typedef vector<int> vec; 

void GenerateArr(vec& arr) 
{ 
for (auto& a : arr) 
{ 
a = rand() % 100; 
} 
} 

void ShowArr(vec& arr) 
{ 
cout << "[ "; 
for (auto& a : arr) 
{ 
cout << a << " "; 
} 
cout << "]" << endl; 
} 

string space(int count) 
{ 
string str; 
while (count) 
{ 
str += " "; 
count--; 
} 
return str; 
} 

void ShowArrAsTree(vec& arr) 
{ 
int size = arr.size(); 
int distance = pow(2, floor(log(size) / log(2))); //Calculate distance between childs 
int countOnLevel = 0; //Count of childs in current level 
int maxOnLevel = 1; //Max count of childs in current level 

for (size_t i = 0; i < size; ++i) 
{ 
cout << space(distance - 1) << arr[i] << space(distance); 
countOnLevel++; 

if (countOnLevel == maxOnLevel) 
{ 
countOnLevel = 0; 
maxOnLevel *= 2; 
distance = ceil(distance / 2.); 
cout << endl; 
} 
} 
} 

int main() 
{ 
int size; 
cout << "Enter size of array: "; 
cin >> size; 
vec arr(size); 
GenerateArr(arr); 
ShowArr(arr); 
ShowArrAsTree(arr); 
}